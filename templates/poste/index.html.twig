{% extends 'base.html.twig' %}

{% block title %}Liste des postes{% endblock %}

{% block body %}
<div class="body">
       <style>
            body {
            background-color: #f2f2f2; /* Fond d'écran gris */
            font-family: Arial, sans-serif;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .table-container, .form-container {
            flex: 1;
            margin: 10px;
        }
        .form-container {
            max-width: 400px;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: black;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2; /* Ligne de fond gris clair */
        }
        tr:nth-child(odd) {
            background-color: #fff; /* Ligne de fond blanc */
        }
        #searchInput {
            width: 100%;
            padding: 10px;
            margin-bottom: 20px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
    </style>

<body>
    <div class="container">
        <div class="row mb-3">
            <h2 class="col mb-0">Liste des postes</h2>
            <div  class="col" style="display:contents">
                <span data-toggle="tooltip" title="Ajouter un poste :">
                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#ajoutModal">
                        <i class="bi bi-plus"></i>  Ajouter 
                    </button>
                </span>
            </div>
        </div>
        {% if success %}
            <div id="success" class="row">
                <div class="alert alert-success" role="alert">
                     {{ success }}
                </div>
            </div>
        {% endif %}

        {% include 'poste/new.html.twig' with {'form': form} %}


        <input type="text" id="searchInput" onkeyup="searchPoste()" placeholder="Rechercher un poste... (nom)">
        <div class="row">
            <div id="entityGrid">
                {% for poste in postes %}
                    <div class="grid-item">
                        <span data-toggle="tooltip" title="{{poste.name}}">
                            <div class="entity-content">
                                {{ poste.name }}
                            </div>
                        </span>
                        <div class="entity-actions">
                            <span data-toggle="tooltip" title="Modifier le poste">
                                <button type="button" class="btn btn-info me-2" data-toggle="modal" data-target="#editModal-{{ poste.id }}">
                                    <i class="bi bi-link"></i>
                                </button>
                            </span>
                            <span data-toggle="tooltip" title="Supprimer le poste">
                                {{ include('poste/_delete_form.html.twig') }}
                            </span>
                        </div>
                    </div>
                    {% include 'poste/edit.html.twig' with {'poste': poste, 'forms': forms} %}
                {% endfor %}
            </div> 
        </div>
    </div>

<script>
    function searchPoste() {
        var input, filter, grid, items, name, i, txtValue;
        input = document.getElementById("searchInput");
        filter = input.value.toUpperCase();
        grid = document.getElementById("entityGrid");
        items = grid.getElementsByClassName("grid-item");
        

        for (i = 0; i < items.length; i++) {
            name = items[i].getElementsByClassName("entity-content")[0];
            if (name) {
                txtValue = name.textContent || name.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    items[i].style.display = "";
                    // Réappliquer l'animation
                    items[i].classList.remove("fade-in-up");
                    void items[i].offsetWidth; // Force le reflow
                    items[i].classList.add("fade-in-up");
                } else {
                    items[i].style.display = "none";
                }
            }
        }
    }

    document.addEventListener('DOMContentLoaded', (event) => {
        // Appliquer l'animation initiale
        const items = document.querySelectorAll('.grid-item');
        items.forEach(item => {
            item.classList.add('fade-in-up');
        });
    });

    $(document).ready(function() {
        $('[id^="myTab-"]').each(function() {
            var posteId = $(this).attr('id').split('-')[1];
            $('#myTab-' + posteId + ' a').on('click', function (e) {
                e.preventDefault();
                $(this).tab('show');
            });
        });
    });
document.addEventListener("DOMContentLoaded", function () {
    let posteIds = document.querySelectorAll("[id^='editPoste-']");
    posteIds.forEach(function (element) {
        let posteId = element.id.replace('editPoste-', '');
        setupCollection('editMachinePoste-' + posteId, 'poste_qualifMachines_');
    });

    setupCollection('machinePoste', 'poste_qualifMachines_');
});

function setupCollection(collectionId, formPrefix) {
    let collection = document.querySelector(`#${collectionId}`);
    if (!collection) return; // Exit if the collection does not exist

    let collectionSpan = collection.querySelector("span");

    let addButton = document.createElement("button");
    addButton.className = "btn custom-btn-outline-success rounded mt-2";
    addButton.type = "button";
    addButton.innerHTML = '<i class="bi bi-plus-circle-fill icon-size"></i>';
    collection.appendChild(addButton); // Append the add button to the collection

    // Initialize the index to the number of existing elements
    let existingElements = collection.querySelectorAll(`div[id^='${formPrefix}']`);
    collection.dataset.index = existingElements.length;

    updateDeleteButtons(collection, formPrefix);

    addButton.addEventListener("click", function () {
        addNewForm(collection, collectionSpan, collectionId, formPrefix);
    });
}

function updateDeleteButtons(collection, formPrefix) {
    let collectionDivs = collection.querySelectorAll(`div[id^='${formPrefix}']`);
    collectionDivs.forEach(function (div, index) {
        if (!div.querySelector('.btn.custom-btn-outline-danger')) {
            addDeleteButton(div, index, formPrefix);
        }
    });
}

function addDeleteButton(div, index, formPrefix) {
    let divSuppr = document.createElement("div");
    divSuppr.className = "col-1 centered";

    let deleteButton = document.createElement("button");
    deleteButton.type = "button";
    deleteButton.id = `delete-${formPrefix}-${index}`;
    deleteButton.className = "btn custom-btn-outline-danger bouton-suppr-form";
    deleteButton.innerHTML = '<i class="bi bi-trash icon-size"></i>';

    divSuppr.appendChild(deleteButton);
    div.appendChild(divSuppr);

    deleteButton.addEventListener("click", function () {
        div.remove();
        // Update index and IDs of remaining elements
        updateCollectionIndices(collection, formPrefix);
    });
}

function addNewForm(collection, collectionSpan, collectionId, formPrefix) {
    let prototype = collection.dataset.prototype;
    let index = collection.dataset.index;
    let newFormHtml = prototype.replace(/__name__/g, index);

    let tempDiv = document.createElement('div');
    tempDiv.innerHTML = newFormHtml;
    let newForm = tempDiv.firstElementChild;

    newForm.classList.add("row");
    newForm.id = `${formPrefix}${index}`;
    addDeleteButton(newForm, index, formPrefix);

    collectionSpan.appendChild(newForm); // Append the new form to the collection span
    collection.dataset.index++;
}

function updateCollectionIndices(collection, formPrefix) {
    let collectionDivs = collection.querySelectorAll(`div[id^='${formPrefix}']`);
    collectionDivs.forEach(function (div, index) {
        div.id = `${formPrefix}${index}`;
        let deleteButton = div.querySelector('.btn.custom-btn-outline-danger');
        if (deleteButton) {
            deleteButton.id = `delete-${formPrefix}-${index}`;
        }
    });
    // Update the index to the new number of elements
    collection.dataset.index = collectionDivs.length;
}





</script>


</body>
</html>
</div> 
{% endblock %}

