{% extends 'base.html.twig' %}

{% block title %}Liste des pièces{% endblock %}

{% block body %}
<div class="body">
       <style>
            body {
            background-color: #f2f2f2; /* Fond d'écran gris */
            font-family: Arial, sans-serif;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .table-container, .form-container {
            flex: 1;
            margin: 10px;
        }
        .form-container {
            max-width: 400px;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: black;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2; /* Ligne de fond gris clair */
        }
        tr:nth-child(odd) {
            background-color: #fff; /* Ligne de fond blanc */
        }
        #searchInput {
            width: 100%;
            padding: 10px;
            margin-bottom: 20px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
    </style>

<body>
    <div class="container">
        <div class="row mb-3">
            <h2 class="col mb-0">Créer une réalisation (1/3)</h2>
        </div>
        Bienvenue dans la page de création de réalisation. Dans un premier temps, veuillez choisir la pièce à créer.
        <div class = "row">
            {{ form_start(form, {'attr': {'class': 'form-inline'}}) }}
                <div class="col-auto">
                    {{ form_widget(form.piece) }}
                </div>
                <div class="col-auto">
                    <button type="submit" class="btn btn-primary btn-sm">Valider</button>
                </div>
            {{ form_end(form) }}
        </div>

<script>
   function searchPiece() {
    var input, filter, grid, items, i, txtValue;
    input = document.getElementById("searchInput");
    filter = input.value.toUpperCase();
    grid = document.getElementById("entityGrid");
    items = grid.getElementsByClassName("grid-item");

    for (i = 0; i < items.length; i++) {
        var name = items[i].getElementsByClassName("entity-content")[0];
        var libelle = items[i].getElementsByClassName("entity-content")[1];
        
        if (name || libelle) {
            var nameValue = name ? name.textContent || name.innerText : "";
            var libelleValue = libelle ? libelle.textContent || libelle.innerText : "";
            txtValue = nameValue + " " + libelleValue;

            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                items[i].style.display = "";
                // Réappliquer l'animation
                items[i].classList.remove("fade-in-up");
                void items[i].offsetWidth; // Force le reflow
                items[i].classList.add("fade-in-up");
            } else {
                items[i].style.display = "none";
            }
        }
    }
}


    document.addEventListener('DOMContentLoaded', (event) => {
        // Appliquer l'animation initiale
        const items = document.querySelectorAll('.grid-item');
        items.forEach(item => {
            item.classList.add('fade-in-up');
        });
    });

    $(document).ready(function() {
        $('[id^="myTab-"]').each(function() {
            var machineId = $(this).attr('id').split('-')[1];
            $('#myTab-' + machineId + ' a').on('click', function (e) {
                e.preventDefault();
                $(this).tab('show');
            });
        });
    });
document.addEventListener("DOMContentLoaded", function () {
    let pieceIds = document.querySelectorAll("[id^='editPiece-']");
    pieceIds.forEach(function (element) {
        let pieceId = element.id.replace('editPiece-', '');
        setupCollection('editCompositionPiece-' + pieceId, 'piece_compositions_');
    });

    setupCollection('pieceComposition', 'piece_compositions_');
});

function setupCollection(collectionId, formPrefix) {
    let collection = document.querySelector(`#${collectionId}`);
    if (!collection) return; // Exit if the collection does not exist

    let collectionSpan = collection.querySelector("span");

    let addButton = document.createElement("button");
    addButton.className = "btn custom-btn-outline-success rounded mt-2";
    addButton.type = "button";
    addButton.innerHTML = '<i class="bi bi-plus-circle-fill icon-size"></i>';
    collection.appendChild(addButton); // Append the add button to the collection

    // Initialize the index to the number of existing elements
    let existingElements = collection.querySelectorAll(`div[id^='${formPrefix}']`);
    collection.dataset.index = existingElements.length;

    updateDeleteButtons(collection, formPrefix);

    addButton.addEventListener("click", function () {
        addNewForm(collection, collectionSpan, collectionId, formPrefix);
    });
}

function updateDeleteButtons(collection, formPrefix) {
    let collectionDivs = collection.querySelectorAll(`div[id^='${formPrefix}']`);
    collectionDivs.forEach(function (div, index) {
        if (!div.querySelector('.btn.custom-btn-outline-danger')) {
            addDeleteButton(div, index, formPrefix);
        }
    });
}

function addDeleteButton(div, index, formPrefix) {
    let divSuppr = document.createElement("div");
    divSuppr.className = "col-1 centered";

    let deleteButton = document.createElement("button");
    deleteButton.type = "button";
    deleteButton.id = `delete-${formPrefix}-${index}`;
    deleteButton.className = "btn custom-btn-outline-danger bouton-suppr-form";
    deleteButton.innerHTML = '<i class="bi bi-trash icon-size"></i>';

    divSuppr.appendChild(deleteButton);
    div.appendChild(divSuppr);

    deleteButton.addEventListener("click", function () {
        div.remove();
        // Update index and IDs of remaining elements
        updateCollectionIndices(collection, formPrefix);
    });
}

function addNewForm(collection, collectionSpan, collectionId, formPrefix) {
    let prototype = collection.dataset.prototype;
    let index = collection.dataset.index;
    let newFormHtml = prototype.replace(/__name__/g, index);

    let tempDiv = document.createElement('div');
    tempDiv.innerHTML = newFormHtml;
    let newForm = tempDiv.firstElementChild;

    newForm.classList.add("row");
    newForm.id = `${formPrefix}${index}`;
    addDeleteButton(newForm, index, formPrefix);

    collectionSpan.appendChild(newForm); // Append the new form to the collection span
    collection.dataset.index++;
}

function updateCollectionIndices(collection, formPrefix) {
    let collectionDivs = collection.querySelectorAll(`div[id^='${formPrefix}']`);
    collectionDivs.forEach(function (div, index) {
        div.id = `${formPrefix}${index}`;
        let deleteButton = div.querySelector('.btn.custom-btn-outline-danger');
        if (deleteButton) {
            deleteButton.id = `delete-${formPrefix}-${index}`;
        }
    });
    // Update the index to the new number of elements
    collection.dataset.index = collectionDivs.length;
}


document.addEventListener('DOMContentLoaded', function () {
    function toggleAdditionalFields(event) {
        const checkbox = event.target;
        const targetId = checkbox.dataset.target;
        
        const additionalFields = document.getElementById(targetId);

        if (additionalFields) {
            if (checkbox.checked) {
                additionalFields.classList.remove('d-none');
            } else {
                additionalFields.classList.add('d-none');
            }
        }
    }

    function initializeCheckboxes() {
        const fabriqueCheckboxes = document.querySelectorAll('.fabrique-checkbox');
        fabriqueCheckboxes.forEach(checkbox => {
            console.log('Initializing checkbox:', checkbox.id);
            toggleAdditionalFields({ target: checkbox });
            checkbox.addEventListener('change', toggleAdditionalFields);
        });
    }

    // Initial check on page load
    initializeCheckboxes();

    // Add event listener to tab changes to re-evaluate checkbox states
    document.querySelectorAll('.nav-link').forEach(tab => {
        tab.addEventListener('shown.bs.tab', function () {
            console.log('Tab shown:', tab.id);
            initializeCheckboxes();
        });
    });

    // Use MutationObserver to detect dynamic changes in the DOM
    const observer = new MutationObserver(() => {
        console.log('Mutation observed');
        initializeCheckboxes();
    });

    const config = { childList: true, subtree: true };
    observer.observe(document.body, config);
});




</script>


</body>
</html>
</div> 
{% endblock %}

